setwd("E:/Google Drive/Universidad/4 carrera/P_Cuatri/Aprendizaje/CART")
library(party)
set.seed(1234)
# NOT RUN {
x <- 1:12
# a random permutation
sample(x)
# bootstrap resampling -- only if length(x) > 1 !
sample(x, replace = TRUE)
# sample()'s surprise -- example
x <- 1:10
sample(x[x >  8]) # length 2
sample(2, nrow(iris), replace = TRUE, prob = c(0.7,0.3))
nrow(iris)
indices <- sample(2, nrow(iris), replace = TRUE, prob = c(0.7,0.3)) #Sampleado de 2 indices, tamaño filas de iris, replace=true es que un elem no se repite 2 veces, probabilidad 70 y un 30 en cada indice
library(party)
set.seed(1234)
indices <- sample(2, nrow(iris), replace = TRUE, prob = c(0.7,0.3)) #Sampleado de 2 indices, tamaño filas de iris, replace=true es que un elem no se repite 2 veces, probabilidad 70 y un 30 en cada indice
iris
train <- iris[indices == 1]
train <- iris[indices == 1,]
validation <- iris[indices == 2]
validation <- iris[indices == 2,]
#FORMULA
iris
data <- read.table("datos_icb.txt", sep=" ", header=TRUE, stringsAsFactors = TRUE)
View(data)
View(data)
#FORMULA
formula <- iris$Species ~ .
library(party)
set.seed(1234)
#CREAR DATA
indices <- sample(2, nrow(iris), replace = TRUE, prob = c(0.7,0.3)) #Sampleado de 2 indices, tamaño filas de iris, replace=true es que un elem no se repite 2 veces, probabilidad 70 y un 30 en cada indice
train <- iris[indices == 1,] #coge este indice en las filas
validation <- iris[indices == 2,]
#FORMULA
formula <- iris$Species ~ .
#FORMULA
formula <- Species ~ .
#ARBOL PARTY
tree_party <- ctree(formula, data = train)
plot(tree_party)
library(rpart)
library(rpart.plot)
#ARBOL RPART
rpart_tree <- rpart(formula, data = training_set, method = "class")
#ARBOL RPART
rpart_tree <- rpart(formula, data = training_set, method = "class")
#ARBOL RPART
rpart_tree <- rpart(formula, data = train, method = "class")
rpart.plot(rpart_tree)
#ARBOL PARTY
tree_party <- ctree(formula, data = train)
plot(tree_party)
rpart.plot(rpart_tree)
#ARBOL RPART
rpart_tree <- rpart(formula, data = train,minbucket = 1, minsplit=1, method = "class")
rpart.plot(rpart_tree)
rpart_tree <- rpart(formula, data = train, method ="class")
rpart.ploy(rpart_tree2)
rpart.plot(rpart_tree2)
#ARBOL RPART
rpart_tree <- rpart(formula, data = train,minbucket = 1, minsplit=1, method = "class")
rpart.plot(rpart_tree)
rpart_tree2 <- rpart(formula, data = train, method ="class")
rpart.plot(rpart_tree)
rpart.plot(rpart_tree2)
rpart.plot(rpart_tree)
for (n in 1:limit_param1) {
for(m in 1:limit_param2){
tree = rpart(formula, train_set, method="class", minbucket=n, minsplit=m)
optimal_cp = tree$cptable[which.min(tree$cptable[,"xerror"]),"CP"]
pruned_tree = prune(tree, cp=optimal_cp)
confusion_matrix_pruned = table(predict(pruned_tree, newdata=validation_set, type="class"), validation_set$recid)
val_accuracy = sum(diag(confusion_matrix_pruned))/sum(confusion_matrix_pruned)
if(val_accuracy > max_accuracy){
max_accuracy = val_accuracy
best_tree = pruned_tree
param_minbucket = n
param_minsplit = m
}
}
}
limit_param1 = 30
limit_param2 = 30
max_accuracy = 0
for (n in 1:limit_param1) {
for(m in 1:limit_param2){
tree = rpart(formula, train_set, method="class", minbucket=n, minsplit=m)
optimal_cp = tree$cptable[which.min(tree$cptable[,"xerror"]),"CP"]
pruned_tree = prune(tree, cp=optimal_cp)
confusion_matrix_pruned = table(predict(pruned_tree, newdata=validation_set, type="class"), validation_set$recid)
val_accuracy = sum(diag(confusion_matrix_pruned))/sum(confusion_matrix_pruned)
if(val_accuracy > max_accuracy){
max_accuracy = val_accuracy
best_tree = pruned_tree
param_minbucket = n
param_minsplit = m
}
}
}
tree = rpart(formula, train, method="class", minbucket=n, minsplit=m)
for (n in 1:limit_param1) {
for(m in 1:limit_param2){
tree = rpart(formula, train, method="class", minbucket=n, minsplit=m)
optimal_cp = tree$cptable[which.min(tree$cptable[,"xerror"]),"CP"]
pruned_tree = prune(tree, cp=optimal_cp)
confusion_matrix_pruned = table(predict(pruned_tree, newdata=validation_set, type="class"), validation_set$recid)
val_accuracy = sum(diag(confusion_matrix_pruned))/sum(confusion_matrix_pruned)
if(val_accuracy > max_accuracy){
max_accuracy = val_accuracy
best_tree = pruned_tree
param_minbucket = n
param_minsplit = m
}
}
}
confusion_matrix_pruned = table(predict(pruned_tree, newdata=validation, type="class"), validation_set$recid)
for (n in 1:limit_param1) {
for(m in 1:limit_param2){
tree = rpart(formula, train, method="class", minbucket=n, minsplit=m)
optimal_cp = tree$cptable[which.min(tree$cptable[,"xerror"]),"CP"]
pruned_tree = prune(tree, cp=optimal_cp)
confusion_matrix_pruned = table(predict(pruned_tree, newdata=validation, type="class"), validation_set$recid)
val_accuracy = sum(diag(confusion_matrix_pruned))/sum(confusion_matrix_pruned)
if(val_accuracy > max_accuracy){
max_accuracy = val_accuracy
best_tree = pruned_tree
param_minbucket = n
param_minsplit = m
}
}
}
for (n in 1:limit_param1) {
for(m in 1:limit_param2){
tree = rpart(formula, train, method="class", minbucket=n, minsplit=m)
optimal_cp = tree$cptable[which.min(tree$cptable[,"xerror"]),"CP"]
pruned_tree = prune(tree, cp=optimal_cp)
confusion_matrix_pruned = table(predict(pruned_tree, newdata=validation, type="class"), validation$Species)
val_accuracy = sum(diag(confusion_matrix_pruned))/sum(confusion_matrix_pruned)
if(val_accuracy > max_accuracy){
max_accuracy = val_accuracy
best_tree = pruned_tree
param_minbucket = n
param_minsplit = m
}
}
}
matrizConfusionRpart = table(predictionRPart, validation_set$recid)
matrizConfusionRpart = table(predictionRPart, validation_set$recid)
library(party)
library(rpart)
library(rpart.plot)
set.seed(1234)
#CREAR DATA
indices <- sample(2, nrow(iris), replace = TRUE, prob = c(0.7,0.3)) #Sampleado de 2 indices, tamaño filas de iris, replace=true es que un elem no se repite 2 veces, probabilidad 70 y un 30 en cada indice
train <- iris[indices == 1,] #coge este indice en las filas
validation <- iris[indices == 2,]
#FORMULA
formula <- iris$Species ~ .
#ARBOL PARTY
tree_party <- ctree(formula, data = train)
plot(tree_party)
#ARBOL RPART
rpart_tree <- rpart(formula, data = train,minbucket = 1, minsplit=1, method = "class")
#ARBOL RPART
rpart_tree <- rpart(formula, data = train,minbucket = 1, minsplit=1, method = "class")
#ARBOL RPART
rpart_tree <- rpart(formula, data = train,minbucket = 1, minsplit=1, method = "class")
rpart_tree2 <- rpart(formula, data = train, minbucket = 2, minsplit = 1, method ="class")
#ARBOL RPART
rpart_tree <- rpart(formula, data = train, method = "class")
View(tree_party)
clc
clr
library(party)
library(rpart)
library(rpart.plot)
set.seed(1234)
#CREAR DATA
indices <- sample(2, nrow(iris), replace = TRUE, prob = c(0.7,0.3)) #Sampleado de 2 indices, tamaño filas de iris, replace=true es que un elem no se repite 2 veces, probabilidad 70 y un 30 en cada indice
train <- iris[indices == 1,] #coge este indice en las filas
validation <- iris[indices == 2,]
#FORMULA
formula <- iris$Species ~ .
#ARBOL RPART
rpart_tree <- rpart(formula, data = train,minbucket = 1, minsplit=1, method = "class")
#ARBOL RPART
rpart_tree <- rpart(formula, data = train, method = "class")
#FORMULA
formula <- Species ~ .
#ARBOL RPART
rpart_tree <- rpart(formula, data = train, method = "class")
#FORMULA
formula <- iris$Species ~ .
#ARBOL RPART
rpart_tree <- rpart(formula, data = train, method = "class")
#FORMULA
formula <- Species ~ .
Species
iris$Species
#FORMULA
formula <- train$Species ~ .
#ARBOL RPART
rpart_tree <- rpart(formula, data = train, method = "class")
rpart.plot(rpart_tree)
#ARBOL RPART
rpart_tree <- rpart(formula, data = train, minbucket = 2, minsplit = 1,method = "class")
rpart.plot(rpart_tree)
#ARBOL RPART
rpart_tree <- rpart(formula, data = train, minbucket = 1, minsplit = 1,method = "class")
rpart.plot(rpart_tree)
rpart_tree2 <- rpart(formula, data = train, minbucket = 2, minsplit = 1, method ="class")
rpart.plot(rpart_tree2)
predictionRPart = predict(rpart_tree, type="class", newdata = validation)
predictionRPart2 = predict(rpart_tree2, type="class", newdata = validation)
matrizConfusionRpart = table(predictionRPart, validation$Species)
matrizConfusionRpart2 = table(predictionRPart2, validation$Species)
accuracyRpart = sum(diag(matrizConfusionRpart))/sum(matrizConfusionRpart)
accuracyRpart
accuracyRpart2 = sum(diag(matrizConfusionRpart2))/sum(matrizConfusionRpart2)
accuracyRpart2
#ARBOL RPART
rpart_tree0 <- rpart(formula, data = train, method = "class")
rpart.plot(rpart_tree0)
rpart_tree <- rpart(formula, data = train, minbucket = 1, minsplit = 1,method = "class")
rpart.plot(rpart_tree)
rpart_tree2 <- rpart(formula, data = train, minbucket = 2, minsplit = 1, method ="class")
rpart.plot(rpart_tree2)
rpart.plot(rpart_tree0)
predictionRPart0 = predict(rpart_tree2, type="class", newdata = validation)
matrizConfusionRpart0 = table(predictionRPart0, validation$Species)
accuracyRpart0
accuracyRpart0 = sum(diag(matrizConfusionRpart0))/sum(matrizConfusionRpart0)
accuracyRpart0
library(party)
library(rpart)
library(rpart.plot)
set.seed(1234)
#CREAR DATA
indices <- sample(2, nrow(iris), replace = TRUE, prob = c(0.7,0.3)) #Sampleado de 2 indices, tamaño filas de iris, replace=true es que un elem no se repite 2 veces, probabilidad 70 y un 30 en cada indice
train <- iris[indices == 1,] #coge este indice en las filas
validation <- iris[indices == 2,]
#FORMULA
formula <- train$Species ~ .
#ARBOL PARTY
tree_party <- ctree(formula, data = train)
plot(tree_party)
#ARBOL RPART
rpart_tree0 <- rpart(formula, data = train, method = "class")
rpart.plot(rpart_tree0)
rpart_tree <- rpart(formula, data = train, minbucket = 1, minsplit = 1,method = "class")
rpart.plot(rpart_tree)
rpart_tree2 <- rpart(formula, data = train, minbucket = 2, minsplit = 1, method ="class")
rpart.plot(rpart_tree2)
predictionRPart = predict(rpart_tree, type="class", newdata = validation)
predictionRPart2 = predict(rpart_tree2, type="class", newdata = validation)
predictionRPart0 = predict(rpart_tree2, type="class", newdata = validation)
matrizConfusionRpart = table(predictionRPart, validation$Species)
matrizConfusionRpart2 = table(predictionRPart2, validation$Species)
matrizConfusionRpart0 = table(predictionRPart0, validation$Species)
accuracyRpart = sum(diag(matrizConfusionRpart))/sum(matrizConfusionRpart)
accuracyRpart
accuracyRpart2 = sum(diag(matrizConfusionRpart2))/sum(matrizConfusionRpart2)
accuracyRpart2
accuracyRpart0 = sum(diag(matrizConfusionRpart0))/sum(matrizConfusionRpart0)
accuracyRpart0
predictionRPart0 = predict(rpart_tree0, type="class", newdata = validation)
matrizConfusionRpart = table(predictionRPart, validation$Species)
matrizConfusionRpart2 = table(predictionRPart2, validation$Species)
matrizConfusionRpart0 = table(predictionRPart0, validation$Species)
accuracyRpart = sum(diag(matrizConfusionRpart))/sum(matrizConfusionRpart)
accuracyRpart
accuracyRpart2 = sum(diag(matrizConfusionRpart2))/sum(matrizConfusionRpart2)
accuracyRpart2
accuracyRpart0 = sum(diag(matrizConfusionRpart0))/sum(matrizConfusionRpart0)
accuracyRpart0
#TREE RPART
rpart_tree <- rpart(formula, data = train, method = "class")
rpart.plot(rpart_tree0)
predictionRPart = predict(rpart_tree, type="class", newdata = validation)
matrizConfusionRpart = table(predictionRPart0, validation$Species)
accuracyRpart= sum(diag(matrizConfusionRpart0))/sum(matrizConfusionRpart0)
accuracyRpart
predictionPARTY <- predict(tree_party, data = validation)
library(party)
library(rpart)
library(rpart.plot)
set.seed(1234)
#CREAR DATA
indices <- sample(2, nrow(iris), replace = TRUE, prob = c(0.7,0.3)) #Sampleado de 2 indices, tamaño filas de iris, replace=true es que un elem no se repite 2 veces, probabilidad 70 y un 30 en cada indice
train <- iris[indices == 1,] #coge este indice en las filas
validation <- iris[indices == 2,]
#FORMULA
formula <- train$Species ~ .
#TREE PARTY
tree_party <- ctree(formula, data = train)
predictionPARTY <- predict(tree_party, data = validation)
ConfusionMatrixPARTY <- table(predictionPARTY, validation$Species)
predictionPARTY <- predict(tree_party)
ConfusionMatrixPARTY <- table(predictionPARTY, validation$Species)
predictionPARTY <- predict(tree_party)
ConfusionMatrixPARTY <- table(predictionPARTY, train$Species)
predictionPARTY <- predict(tree_party, newdata = validation)
ConfusionMatrixPARTY <- table(predictionPARTY, validation$Species)
ConfusionMatrixPARTY
accuracyParty = sum(diag(ConfusionMatrixPARTY))/sum(ConfusionMatrixPARTY)
accuracyParty
prediction
tree_party = ctree(formula, data = training_set)
#TREE RPART
rpart_tree <- rpart(formula, data = train, method = "class")
predictionRPart = predict(rpart_tree, type="class", newdata = validation)
matrizConfusionRpart = table(predictionRPart0, validation$Species)
accuracyRpart= sum(diag(matrizConfusionRpart0))/sum(matrizConfusionRpart0)
accuracyRpart
predictionRPart = predict(rpart_tree, type="class", newdata = validation)
matrizConfusionRpart = table(predictionRPart, validation$Species)
accuracyRpart= sum(diag(matrizConfusionRpart))/sum(matrizConfusionRpart)
accuracyRpart
setwd("E:/Google Drive/Universidad/4 carrera/P_Cuatri/Aprendizaje/CART")
setwd("E:/Google Drive/Universidad/4 carrera/P_Cuatri/Aprendizaje/ML-UMA-CART")
